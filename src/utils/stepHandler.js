const Composer = require('telegraf/composer');
const { getWeather } = require('./getWeather');

const stepHandler = new Composer();

stepHandler.action('correct_location', async (ctx) => {
  try {
    await ctx.deleteMessage();

    // saving all changes made to user's data in DB
    ctx.dbuser.location = ctx.dbuser.confirm.location;
    ctx.dbuser.latitudeLocation = ctx.dbuser.confirm.latitudeLocation;
    ctx.dbuser.longtitudeLocation = ctx.dbuser.confirm.longtitudeLocation;

    ctx.dbuser.confirm = {};

    await ctx.dbuser.save();

    await ctx.reply(`OK! –í–∞—à–∞ —Ç–µ–∫—É—â–∞—è –ª–æ–∫–∞—Ü–∏—è - ${ctx.dbuser.location} ‚úÖ`);
    let weather = await getWeather(ctx.dbuser);
    if (weather) {
      ctx.reply(`–ü–æ–≥–æ–¥–∞ —Å–µ–≥–æ–¥–Ω—è: ${weather}`);
    }
    return ctx.scene.leave();
  } catch (e) {
    console.log(e);
    ctx.reply(
      `–ù–µ –º–æ–≥—É —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É –≤ ${ctx.dbuser.location}, –ø—Ä–æ—à—É –ø—Ä–æ—â–µ–Ω–∏—è üòû`
    );
  }
});

stepHandler.action('false_location', async (ctx) => {
  await ctx.deleteMessage();
  await ctx.reply(
    '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–∫–∞–∑–∞—Ç—å –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é (—É–∫–∞–∂–∏—Ç–µ –æ–±–ª–∞—Å—Ç—å, —Ä–∞–π–æ–Ω –∏ —Ç.–¥.).'
  );
  return ctx.scene.reenter();
});

stepHandler.use((ctx) =>
  ctx.replyWithMarkdown('–°–¥–µ–ª–∞–π—Ç–µ –≤–∞—à –≤—ã–±–æ—Ä, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞!')
);

module.exports = { stepHandler };
